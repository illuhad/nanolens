{"name":"Nanolens","tagline":"A high performance, fully parallelized MPI application to calculate magnification patterns caused by gravitational microlensing","body":"#About\r\nNanolens is an application to calculate gravitational lensing effects (currently microlensing magnification patterns, but additional features are planned for the future), with a focus on\r\n* Modern codebase: nanolens is a modern, object-oriented application written in standard-compliant C++11.\r\n* Generality: Features are implemented in the most general (but still efficient) way possible to allow for easy reuse for different applications.\r\n* Performance: Fully parallel MPI implementation, Starting with nanolens 3: Optional additional support for GPU acceleration via CUDA, support for GPU clusters.\r\n* Powerful: nanolens is designed to be an extendible collection of different methods algorithms rather than an implementation of one specific method.\r\n* User-friendly, flexible configuration: The application is fully controlled via a xml-file. No changes to the code itself are required to alter the solved problem. Results are stored in easy-to-use formats, such as FITS images.\r\n\r\n#Installation\r\n## Dependencies\r\nFor a successful build, you must have the following software installed\r\n* cmake [used as build system]\r\n* A C++ compiler with C++11 support. gcc >= 4.8 should be fine. [for the new C++ features used in the code]\r\n* cfitsio [used to read/write fits images]\r\n* A working MPI implentation, e.g. OpenMPI [required for the parallelization]\r\n* the boost C++ libraries, especially\r\n    * boost::mpi [C++ interface to MPI]\r\n    * boost::serialization [used to serialize C++ datatypes for MPI data transfers]\r\n\r\nAdditionally, the following optional dependencies exist:\r\n* CUDA [for GPU acceleration, available from nanolens 3.0 onwards]\r\n* Doxygen [if you want to generate code documentation]\r\n\r\n## Configuration and compilation\r\nConfiguration and compilation can be done with the following commands\r\n`mkdir build; cd build`\r\n`cmake <source directory>`\r\n`make`\r\n\r\nIf you wish to use a more graphical frontend, replace `cmake` by `ccmake` in the above commands. `ccmake` provides a relatively intuitive interface to configure the project, and enable optional features such as CUDA support. By default, CUDA support is disabled.\r\n\r\nTo generate code documentation, type\r\n`make doc`\r\n\r\n## Using nanolens\r\nYou should now have one program called `nanolens` and one program called `nanopostprocess` as well as an example configuration file `nanolens.xml`\r\n\r\n### nanolens\r\n### nanopostprocess","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}